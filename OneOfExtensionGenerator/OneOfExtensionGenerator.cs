using System.Collections.Concurrent;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Rop.OneOfExtensionGenerator
{
    [Generator]
    public class OneOfExtensionGenerator : ISourceGenerator
    {


        public void Initialize(GeneratorInitializationContext context)
        {
            //#if DEBUG
            //            if (!Debugger.IsAttached)
            //            {
            //                Debugger.Launch();
            //            }
            //#endif 
            context.RegisterForSyntaxNotifications(() => new ClassesWithOneOfSyntaxReceiver());

        }

        public void Execute(GeneratorExecutionContext context)
        {
            var collector = context.SyntaxReceiver as ClassesWithOneOfSyntaxReceiver;
            if (collector == null || collector.ClassesToAugment.Count == 0) return;
            foreach (var classtoaugment in collector.ClassesToAugment)
            {
                generateCode(context, classtoaugment);
            }
            collector.Clear();
        }
        private void generateCode(GeneratorExecutionContext context, ExtensionClassWithOneOfToAugment classtoaugment)
        {
            var file = classtoaugment.ClassToAugment.FileName + ".split.g.cs";
            var sb = new StringBuilder();
            sb.AppendLine("// Autogenerated code for spliting OneOf Extensions");
            sb.AppendLines(classtoaugment.ClassToAugment.GetHeader());
            foreach (var methodToAugment in classtoaugment.MethodsToAugment)
            {
                augmentMethod(sb, methodToAugment);
            }
            sb.AppendLines(classtoaugment.ClassToAugment.GetFooter());
            var final = sb.ToString();
            context.AddSource(file, final);
        }

        private void augmentMethod(StringBuilder sb, OneOfMethodToAugment methodToAugment)
        {
            var finalid = methodToAugment.Identifier;
            if (finalid.StartsWith("_")) finalid = finalid.Substring(1);
            if (char.IsLower(finalid[0])) finalid = finalid.Substring(0, 1).ToUpper() + finalid.Substring(1);

            foreach (var gtype in methodToAugment.TypesToAugment)
            {
                sb.Append("\t\tpublic static ");
                sb.Append(methodToAugment.ReturnType);
                sb.Append(" ");
                sb.Append(finalid);
                sb.Append(methodToAugment.TypeParameterList);
                sb.Append("(this ");
                sb.Append(gtype);
                sb.Append(" ");
                sb.Append(methodToAugment.FirstParameterName);
                if (methodToAugment.RestOfParameters.Length > 0)
                {
                    sb.Append(", ");
                    sb.Append(string.Join(", ", methodToAugment.RestOfParameters));
                }
                sb.Append(")");
                sb.AppendLine(methodToAugment.ConstraintClauses);
                sb.AppendLine("\t\t{");
                if (methodToAugment.ReturnType!="void")
                    sb.Append("\t\t\treturn ");
                else
                    sb.Append("\t\t\t");
                sb.Append(methodToAugment.Identifier);
                sb.Append(methodToAugment.TypeParameterList);
                sb.Append("(");
                sb.Append(methodToAugment.FirstParameterName);
                if (methodToAugment.RestOfVariables.Length > 0)
                {
                    sb.Append(",");
                    sb.Append(string.Join(", ", methodToAugment.RestOfVariables));
                }
                sb.AppendLine(");");
                sb.AppendLine("\t\t}");
            }
        }


        class ClassesWithOneOfSyntaxReceiver : ISyntaxReceiver
        {
            public ConcurrentBag<ExtensionClassWithOneOfToAugment> ClassesToAugment { get; private set; } = new ConcurrentBag<ExtensionClassWithOneOfToAugment>();
            public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
            {
                // Business logic to decide what we're interested in goes here
                if (syntaxNode is ClassDeclarationSyntax cds && cds.IsDecoratedWith("OneOfExtension"))
                {
                    var ac = new ExtensionClassWithOneOfToAugment(cds);
                    if (ac.MethodsToAugment.Count > 0) ClassesToAugment.Add(ac);
                }
            }
            public void Clear()
            {
                ClassesToAugment = new ConcurrentBag<ExtensionClassWithOneOfToAugment>();
            }
        }
    }
}
